/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useContext, useReducer, useState } from "react";
import { Html, useGLTF, useSelect } from "@react-three/drei";
import { Panel } from "../Panel/Panel";
import { PortalContext } from "../../App";
import { useHover } from "@use-gesture/react";
import { Edges } from "@react-three/drei";

const initialColorState = {
  lowerFloorColor: "grey",
  sideWallColor: "grey",
  lowerWallMainColor: "grey",
  bedWallColor: "grey",
  windowFramesColor: "grey",
  upperFloorColor: "grey",
  stairsColor: "grey",
  handRailColor: "grey",
};
const colorReducer = (state, action) => {
  switch (action.type) {
    case "lowerFloorColor":
      return { ...state, lowerFloorColor: action.payload };
    case "sideWallColor":
      return { ...state, sideWallColor: action.payload };
    case "lowerWallMainColor":
      return { ...state, lowerWallMainColor: action.payload };
    case "bedWallColor":
      return { ...state, bedWallColor: action.payload };
    case "windowFramesColor":
      return { ...state, windowFramesColor: action.payload };
    case "upperFloorColor":
      return { ...state, upperFloorColor: action.payload };
    case "stairsColor":
      return { ...state, stairsColor: action.payload };
    case "handRailColor":
      return { ...state, handRailColor: action.payload };
    case "reset":
      return initialColorState;
    default:
      throw new Error(`Unknown action type: ${action.type}`);
  }
};

const initialHoverState = {
  lowerFloorHover: false,
  sideWallHover: false,
  lowerWallMainHover: false,
  bedWallHover: false,
  windowFramesHover: false,
  upperFloorHover: false,
  stairsHover: false,
  handRailHover: false,
};

const hoverReducer = (state, action) => {
  switch (action.type) {
    case "lowerFloorHover":
      return { ...state, lowerFloorHover: !state.lowerFloorHover };
    case "sideWallHover":
      return { ...state, sideWallHover: !state.sideWallHover };
    case "lowerWallMainHover":
      return { ...state, lowerWallMainHover: !state.lowerWallMainHover };
    case "bedWallHover":
      return { ...state, bedWallHover: !state.bedWallHover };
    case "windowFramesHover":
      return { ...state, windowFramesHover: !state.windowFramesHover };
    case "upperFloorHover":
      return { ...state, upperFloorHover: !state.upperFloorHover };
    case "stairsHover":
      return { ...state, stairsHover: !state.stairsHover };
    case "handRailHover":
      return { ...state, handRailHover: !state.handRailHover };
    case "reset":
      return initialHoverState;
    default:
      throw new Error(`Unknown action type: ${action.type}`);
  }
};

export default function IsometericRoom(props) {
  const [colorState, colorDispatch] = useReducer(
    colorReducer,
    initialColorState
  );
  const [hoverState, hoverDispatch] = useReducer(
    hoverReducer,
    initialHoverState
  );

  const selected = useSelect()[0];

  const group = useRef();
  const { nodes, materials } = useGLTF("/Isometric-room/IsometricRoom.glb");
  const portal = useContext(PortalContext);
  const {
    lowerFloorColor,
    sideWallColor,
    windowFramesColor,
    stairsColor,
    bedWallColor,
    handRailColor,
    lowerWallMainColor,
    upperFloorColor,
  } = colorState;

  const {
    lowerFloorHover,
    sideWallHover,
    windowFramesHover,
    stairsHover,
    bedWallHover,
    handRailHover,
    lowerWallMainHover,
    upperFloorHover,
  } = hoverState;

  const panelProps = {
    name: selected && selected.name,
    dispatch: colorDispatch,
    portal: portal.current,
  };

  const hoverProps = {
    onPointerEnter: (event) => {
      console.log(event.intersections[0].object.name);
      event.stopPropagation();
      const name = event.eventObject.name;
      // const name = event.intersections[0].object.name;
      hoverDispatch({ type: `${name}Hover` });
    },
    onPointerLeave: (event) => {
      event.stopPropagation();
      const name = event.eventObject.name;
      hoverDispatch({ type: `${name}Hover` });
    },
  };

  return (
    <group ref={group} {...props} dispose={null}>
      <Html>{selected && <Panel {...panelProps} />}</Html>
      <mesh
        name="lowerFloor"
        castShadow
        receiveShadow
        geometry={nodes.Lower_Floor.geometry}
        material={nodes.Lower_Floor.material}
        position={[0, -0.1, 0]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={lowerFloorHover ? 0.5 : 1}
          color={lowerFloorColor}
        />
      </mesh>
      <mesh
        name="sideWall"
        castShadow
        receiveShadow
        geometry={nodes.Side_wall_Total.geometry}
        material={nodes.Side_wall_Total.material}
        position={[-0.05, 2.5, -2.55]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={sideWallHover ? 0.5 : 1}
          color={sideWallColor}
        />
      </mesh>
      <mesh
        name="stairs"
        castShadow
        receiveShadow
        geometry={nodes.Stairs.geometry}
        material={nodes.Stairs.material}
        position={[1.25, 1.1, -1.1]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={stairsHover ? 0.5 : 1}
          color={stairsColor}
        />
      </mesh>
      <mesh
        name="handRail"
        castShadow
        receiveShadow
        geometry={nodes.Handrail.geometry}
        material={nodes.Handrail.material}
        position={[-0.47, 1.41, -0.18]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={handRailHover ? 0.5 : 1}
          color={handRailColor}
          metalness={1}
        />
      </mesh>
      <mesh
        name="lowerWallMain"
        geometry={nodes.Lower_Wall_Main.geometry}
        material={nodes.Lower_Wall_Main.material}
        position={[-2.55, 2.5, 0]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={lowerWallMainHover ? 0.5 : 1}
          color={lowerWallMainColor}
        />
      </mesh>
      <mesh
        name="bedWall"
        castShadow
        receiveShadow
        geometry={nodes.Bedwall_Section.geometry}
        material={nodes.Bedwall_Section.material}
        position={[-2.55, 3.8, -0.63]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={bedWallHover ? 0.5 : 1}
          color={bedWallColor}
        />
      </mesh>
      <mesh
        name="upperFloor"
        castShadow
        receiveShadow
        geometry={nodes.Upper_Floor.geometry}
        material={nodes.Upper_Floor.material}
        position={[-1.25, 2.3, -0.63]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={upperFloorHover ? 0.5 : 1}
          color={upperFloorColor}
        />
      </mesh>
      <mesh
        name="windowFrames"
        castShadow
        receiveShadow
        geometry={nodes.Window_Frames.geometry}
        material={nodes.Window_Frames.material}
        position={[-0.12, 2.95, -0.07]}
        {...hoverProps}
      >
        <meshStandardMaterial
          transparent={true}
          opacity={windowFramesHover ? 0.5 : 1}
          color={windowFramesColor}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/Isometeric-room/IsometricRoom.glb");
